/*getContext().system().eventStream().subscribe(getSelf(), DeadLetter.class);
		router = getContext().actorOf(new SmallestMailboxPool(4)
					.props(Props.create(WorkerActor.class)
					.withDispatcher("pool-dispatcher")), "Router");
		system.scheduler().schedule(Duration.Zero(), 
				Duration.create(5, "seconds"), router, 
				new HBMessage(), system.dispatcher(), getSelf());
		router.tell("Hello", getSelf());
		router.tell("Hello", getSelf());
		router.tell("Hello", getSelf());
		router.tell("Hello", getSelf());
		router.tell(new Broadcast("Hello"), getSelf());*/
		/*final ArrayList<Future<Object>> futures = new ArrayList<Future<Object>>();
		Future<Object> future = Patterns.ask(router, new Broadcast(new HBMessage()), 5000);
		futures.add(future);
		Future<Iterable<Object>> futureListOfInts = Futures.sequence(futures, system.dispatcher());
		futureListOfInts.onFailure(new PrintResult<Throwable>(), system.dispatcher());*/
		//futureListOfInts.onSuccess(new PrintResult<Future<Iterable<Object>>(), system.dispatcher());
		
		
	final static class PrintResult<T> extends OnSuccess<T> {
		  @Override public final void onSuccess(T t) {
		    System.out.println("On success :"+t);
		  }
	}
	
package com.dataflow.workers;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

import com.dataflow.workers.HeartBeatActor.HBMessage;

import akka.actor.ActorRef;
import akka.actor.ActorSystem;
import akka.actor.Props;
import akka.actor.Terminated;
import akka.actor.UntypedActor;
import akka.dispatch.OnFailure;
import akka.dispatch.OnSuccess;
import akka.pattern.Patterns;
import akka.routing.ActorRefRoutee;
import akka.routing.Broadcast;
import akka.routing.Routee;
import akka.routing.Router;
import akka.routing.SmallestMailboxRoutingLogic;
import scala.concurrent.Future;
import scala.concurrent.duration.Duration;

public class WorkerManager extends UntypedActor{
	
	private ActorSystem system;
	public final int numOfCores;
	private Router router;
	private List<ActorRef> workerActors;
	private AtomicInteger freeWorkers;
	
	public WorkerManager() {
		this.system = getContext().system();
		this.numOfCores = Runtime.getRuntime().availableProcessors();
		this.workerActors = new ArrayList<>();
		this.freeWorkers = new AtomicInteger(numOfCores);
	}
	
	@Override
	public void preStart() throws Exception {
		List<Routee> workers = createWorkers(numOfCores);
		router = new Router(new SmallestMailboxRoutingLogic(), workers);
		router.route(new Broadcast("Hello"), getSelf());
		system.scheduler().schedule(Duration.Zero(), 
				Duration.create(5, "seconds"),()->checkIfWorkersIdle(),
				system.dispatcher());
	}
	
	private List<Routee> createWorkers(int numOfCores) {
		List<Routee> routees = new ArrayList<Routee>();
		for(int i=0; i<numOfCores; i++){
			ActorRef worker = createWorkerActor();
		    routees.add(new ActorRefRoutee(worker));
		}
		
		return routees;
	}
	
	private ActorRef createWorkerActor(){
		ActorRef worker = getContext().actorOf(Props.create(WorkerActor.class)
				.withDispatcher("pool-dispatcher"));
		workerActors.add(worker);
	    getContext().watch(worker);
	    return worker;
	}
	
	private void checkIfWorkersIdle() {
		for(ActorRef worker : workerActors){
			Future<Object> fututre = Patterns.ask(worker, new HBMessage(), 2000);
			
			fututre.onSuccess(new OnSuccess<Object>(){
				@Override
				public void onSuccess(Object obj) throws Throwable {
					if(freeWorkers.get() < numOfCores){
						freeWorkers.incrementAndGet();
						System.out.println("success : "+freeWorkers.get());
					}
				}
			}, system.dispatcher());
			fututre.onFailure(new OnFailure() {
				@Override
				public void onFailure(Throwable throwable) throws Throwable {
					if(freeWorkers.get() > 0){
						freeWorkers.decrementAndGet();
						System.out.println("failed : "+freeWorkers.get());
					}
				}
			}, system.dispatcher());
		}
	}
	
	@Override
	public void onReceive(Object msg) throws Exception {
		System.out.println(getSender());
	    if(msg instanceof HBMessage) {
	    	getSender().tell(new HBMessage(freeWorkers.get()), getSelf());
	    }
		if (msg instanceof Terminated) {
	    	ActorRef terminatedWorker = ((Terminated) msg).actor();
	        router = router.removeRoutee(terminatedWorker);
	        workerActors.remove(terminatedWorker);
	        ActorRef worker = createWorkerActor();
	        router = router.addRoutee(new ActorRefRoutee(worker));
	    }
	}

}
	